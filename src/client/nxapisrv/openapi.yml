openapi: 3.0.1
info:
  title: NetXMS REST API
  description: Documnetation for NetXMS REST API
  version: '0.1'
servers:
  - url: http://127.0.0.1:8000
security:
  - BasicAuth: []
  - CookieAuth: [] 
paths:
  /:
    get:
      summary: Check connection
      description: Service is working
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "description": "NetXMS web service API version 4.3.0-rc223",
                  "version": "4.3.0-rc223",
                  "build": "4.3-223-g20c122be56"
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Authentication
    servers:
      - url: http://127.0.0.1:8000
  /sessions:
    post:
      summary: Creating Rest API session
      description: On success server will set cookie session_handle and json with session GUID and server version.
                   When performing subsequent requests, session GUID should be provided in `Session-Id:` field of request's header
                   or the cookie should be passed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login: 
                  type: string
                  example: admin
                password: 
                  type: string
                  example: netxms
      responses:
        '200':
          description: OK
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: session_handle=f89b60cd-e6b7-4cc6-9b06-292405f09b17; Path=/
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "sessionHandle": "fcb60ade-6c5e-4625-aeff-74193d1d28fc",
                  "session": {
                    "server": {
                      "address": "127.0.0.1",
                      "serverName": "127.0.0.1",
                      "version": "4.3.0-rc223",
                      "color": "",
                      "id": 3523187130265618400,
                      "timeZone": "EET+02EEST"
                    },
                    "user": {
                      "name": "admin",
                      "id": 1,
                      "globalAccessRights": 562743794990847
                    },
                    "encrypted": false,
                    "objectsSynchronized": false,
                    "passwordExpired": false,
                    "zoningEnabled": true
                  }
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Authentication
    servers:
      - url: http://127.0.0.1:8000
  /authenticate:
    post:
      summary: Performing external authentication
      description: The API will return a 200 response if the credentials are correct, a 400 response if
                   either login or password is not provided or 401 if the provided credentials are incorrect.

                   Authentication used to gain Rest API session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login: 
                  type: string
                  example: admin
                password: 
                  type: string
                  example: netxms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "error": 0,
                  "description": "Request completed successfully"
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Authentication
    servers:
      - url: http://127.0.0.1:8000
  /sessions/{sid}:
    delete:
      summary: Logout
      description: To log out request with given session ID.
      parameters:
        - name: sid
          in: path
          required: true
          description: Session id to logout as. 
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "description": "NetXMS web service API version 4.3.0-rc223",
                  "version": "4.3.0-rc223",
                  "build": "4.3-223-g20c122be56"
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Authentication
    servers:
      - url: http://127.0.0.1:8000
  /objects:
    get:
      summary: Get multiple objects with filters
      description: Request to get all objects available to this user or to get objects that fulfill
                  filter requirements and are available to this user.
      parameters:
        - name: area
          in: query
          description: geographical area
          schema:
            type: string
        - name: class
          in: query
          description: comma-separated class list
          schema:
            type: string
        - name: name
          in: query
          description: pattern or regex, if useRegex=true
          schema:
            type: string
        - name: parent
          in: query
          description: parent object id
          schema:
            type: string
        - name: topLevelOnly
          in: query
          description: select top level objects only. false by default
          schema:
            type: boolean
        - name: useRegex
          in: query
          description:  treat name and custom attribute value as regex. false by default
          schema:
            type: boolean
        - name: zone
          in: query
          description: comma-separated list of zone UINs
          schema:
            type: string
        - name: '@custom_attribute_name'
          in: query
          description: pattern or regex, if useRegex=true
          schema:
            type: object
            propertyName:
              pattern: '^@[A-Za-z0-9]+$'  # Parameter names
            additionalProperties: false
            example:
              '@custAttrName1': '@custAttrValue1'
              '@custAttrName2': '@custAttrValue2'
      responses:
        '200':
          description: Will return filtered objects or all objects available to user.
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "objects": [
                      {
                          "objectId": 1,
                          "guid": "102a86aa-f987-4fd5-843c-d85017a79eb3",
                          "objectName": "Entire Network",
                          "alias": "",
                          "nameOnMap": "",
                          "objectClass": 4,
                          "categoryId": 0,
                          "flags": 0,
                          "status": "CRITICAL",
                          "isDeleted": false,
                          "inMaintenanceMode": false,
                          "maintenanceInitiatorId": 0,
                          "primaryZoneProxyId": 0,
                          "backupZoneProxyId": 0,
                          "comments": "",
                          "commentsSource": "",
                          "geolocation": {
                              "type": 0,
                              "latitude": 0.0,
                              "longitude": 0.0,
                              "accuracy": 0,
                              "timestamp": 0
                          },
                          "postalAddress": {
                              "country": "",
                              "region": "",
                              "city": "",
                              "district": "",
                              "streetAddress": "",
                              "postcode": ""
                          },
                          "mapImage": "00000000-0000-0000-0000-000000000000",
                          "drillDownObjectId": 0,
                          "trustedObjects": [],
                          "inheritAccessRights": true,
                          "accessList": [
                              {
                                  "inherited": false,
                                  "userId": 1073741825,
                                  "accessRights": 1048575
                              }
                          ],
                          "statusCalculationMethod": 0,
                          "statusPropagationMethod": 0,
                          "fixedPropagatedStatus": "WARNING",
                          "statusShift": 0,
                          "statusTransformation": [
                              "WARNING",
                              "MINOR",
                              "MAJOR",
                              "CRITICAL"
                          ],
                          "statusSingleThreshold": 75,
                          "statusThresholds": [
                              80,
                              60,
                              40,
                              20
                          ],
                          "creationTime": 0,
                          "parents": [],
                          "children": [
                              4
                          ],
                          "dashboards": [],
                          "customAttributes": {},
                          "urls": [],
                          "responsibleUsers": [],
                          "objectClassName": "Network"
                      }
                  ]
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Objects
    post:
      summary: Create object
      description: Request to create new object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            examples:
              CreateNode:
                summary: 'Minimal JSON for node creation under "Infrastructure Services" object'
                value: {"objectType": 2, "name":"testNode", "parentId": 2, "primaryName":"10.5.0.12" }
              CreateContainer:
                summary: 'Minimal JSON for container creation under "Infrastructure Services" object'
                value: {"objectType": 5, "name":"New container", "parentId": 2}
      responses:
        '200':
          description: New object ID.
          content:
            application/json:
              schema:
                type: object
              example:
                { "id": 15130 }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Objects
    servers:
      - url: http://127.0.0.1:8000
  /objects/{object-id}:
    get:
      summary: Get object by id
      description: Request to get exact object identified by ID or GUID.
      parameters:
        - $ref: '#/components/parameters/objectId'
      responses:
        '200':
          description: Object information identified by provided ID or GUID.
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "objectId": 1,
                  "guid": "102a86aa-f987-4fd5-843c-d85017a79eb3",
                  "objectName": "Entire Network",
                  "alias": "",
                  "nameOnMap": "",
                  "objectClass": 4,
                  "categoryId": 0,
                  "flags": 0,
                  "status": "CRITICAL",
                  "isDeleted": false,
                  "inMaintenanceMode": false,
                  "maintenanceInitiatorId": 0,
                  "primaryZoneProxyId": 0,
                  "backupZoneProxyId": 0,
                  "comments": "",
                  "commentsSource": "",
                  "geolocation": {
                      "type": 0,
                      "latitude": 0.0,
                      "longitude": 0.0,
                      "accuracy": 0,
                      "timestamp": 0
                  },
                  "postalAddress": {
                      "country": "",
                      "region": "",
                      "city": "",
                      "district": "",
                      "streetAddress": "",
                      "postcode": ""
                  },
                  "mapImage": "00000000-0000-0000-0000-000000000000",
                  "drillDownObjectId": 0,
                  "trustedObjects": [],
                  "inheritAccessRights": true,
                  "accessList": [
                      {
                          "inherited": false,
                          "userId": 1073741825,
                          "accessRights": 1048575
                      }
                  ],
                  "statusCalculationMethod": 0,
                  "statusPropagationMethod": 0,
                  "fixedPropagatedStatus": "WARNING",
                  "statusShift": 0,
                  "statusTransformation": [
                      "WARNING",
                      "MINOR",
                      "MAJOR",
                      "CRITICAL"
                  ],
                  "statusSingleThreshold": 75,
                  "statusThresholds": [
                      80,
                      60,
                      40,
                      20
                  ],
                  "creationTime": 0,
                  "parents": [],
                  "children": [
                      4
                  ],
                  "dashboards": [],
                  "customAttributes": {},
                  "urls": [],
                  "responsibleUsers": [],
                  "objectClassName": "Network"
              }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Objects
    patch:
      summary: Update object
      description: Request to update object.                  
      parameters:
        - $ref: '#/components/parameters/objectId'
      requestBody:
        required: true
        description: Fields that are not set will not be updated. Array elements will be replaced fully (if new array does not contain old elements - they will be deleted).
                     Json to update object's custom attributes (json should contain all custom attributes, attributes that are not part of JSON will be deleted)
        content:
          application/json:
            schema:
              type: object
            example:
                    {
                        "customAttributes": {
                            "test attr2": {
                                "value": "new value"
                            },
                            "test attr": {
                                "value": "new value"
                            }
                        }
                      }
      responses:
        '200':
          description: If object was updated successfully. 
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Objects    
    delete:
      summary: Delete object
      description: Request to delete object.           
      parameters:
        - $ref: '#/components/parameters/objectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "description": "NetXMS web service API version 4.3.0-rc223",
                  "version": "4.3.0-rc223",
                  "build": "4.3-223-g20c122be56"
                }
      servers:
        - url: http://127.0.0.1:8000
      tags:
        - Objects
    servers:
      - url: http://127.0.0.1:8000

#Component definition

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    CookieAuth:      
      type: apiKey
      in: cookie
      name: session_handle  
  parameters:
    objectId:
      name: object-id
      in: path
      required: true
      description: Object information identified by provided ID or GUID.
      schema:
        type: string
